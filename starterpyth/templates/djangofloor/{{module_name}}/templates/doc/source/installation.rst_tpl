Installing / Upgrading
======================

Here is a simple tutorial to install {{module_name}} on a basic Debian/Linux installation.
You should easily adapt it on a different Linux or Unix flavor.

Let's start by defining some variables:

.. code-block:: bash

    SERVICE_NAME={{module_name}}.example.com

Database
--------

PostgreSQL is often a good choice for Django sites:

.. code-block:: bash

   sudo apt-get install postgresql
   echo "CREATE USER {{module_name}}" | sudo -u postgres psql -d postgres
   echo "ALTER USER {{module_name}} WITH ENCRYPTED PASSWORD '{{module_name}}-5trongp4ssw0rd'" | sudo -u postgres psql -d postgres
   echo "ALTER ROLE {{module_name}} CREATEDB" | sudo -u postgres psql -d postgres
   echo "CREATE DATABASE {{module_name}} OWNER {{module_name}}" | sudo -u postgres psql -d postgres

Apache
------

I only present the installation with Apache, but an installation behind nginx should be similar.

.. code-block:: bash

    sudo apt-get install apache2 libapache2-mod-xsendfile
    sudo a2enmod headers proxy proxy_http
    sudo a2dissite 000-default.conf
    # sudo a2dissite 000-default on Debian7
    SERVICE_NAME={{module_name}}.example.com
    cat << EOF | sudo tee /etc/apache2/sites-available/{{module_name}}.conf
    <VirtualHost *:80>
        ServerName $SERVICE_NAME
        Alias /static/ /var/{{module_name}}/static/
        Alias /media/ /var/{{module_name}}/media/
        ProxyPass /static/ !
        ProxyPass /media/ !
        ProxyPass / http://localhost:8001/
        ProxyPassReverse / http://localhost:8001/
        DocumentRoot /var/{{module_name}}/
        ServerSignature off
        <Location /static/>
            Order deny,allow
            Allow from all
            Satisfy any
        </Location>
    </VirtualHost>
    EOF
    sudo mkdir /var/{{module_name}}/
    sudo chown -R www-data:www-data /var/{{module_name}}/
    sudo a2ensite {{module_name}}.conf
    sudo apachectl -t
    sudo apachectl restart

If you want Kerberos authentication and SSL:

.. code-block:: bash

    sudo apt-get install apache2 libapache2-mod-xsendfile libapache2-mod-auth-kerb
    PEM=/etc/apache2/`hostname -f`.pem
    KEYTAB=/etc/apache2/http.`hostname -f`.keytab
    # ok, I assume that you already have your certificate and your keytab
    sudo a2enmod auth_kerb headers proxy proxy_http ssl
    openssl x509 -text -noout < $PEM
    cat << EOF | sudo ktutil
    rkt $KEYTAB
    list
    quit
    EOF
    sudo chown www-data $PEM $KEYTAB
    sudo chmod 0400 $PEM $KEYTAB

    cat << EOF | sudo tee /etc/apache2/sites-available/{{module_name}}.conf
    <VirtualHost *:80>
        ServerName $SERVICE_NAME
        RedirectPermanent / https://$SERVICE_NAME/
    </VirtualHost>
    <VirtualHost *:443>
        ServerName $SERVICE_NAME
        SSLCertificateFile $PEM
        SSLEngine on
        Alias /static/ /var/{{module_name}}/static/
        Alias /media/ /var/{{module_name}}/media/
        ProxyPass /static/ !
        ProxyPass /media/ !
        ProxyPass / http://localhost:8001/
        ProxyPassReverse / http://localhost:8001/
        DocumentRoot /var/{{module_name}}/
        ServerSignature off
        RequestHeader set X_FORWARDED_PROTO https
        <Location />
            Options +FollowSymLinks +Indexes
            AuthType Kerberos
            AuthName "{{module_name}}"
            KrbAuthRealms EXAMPLE.ORG
            Krb5Keytab $KEYTAB
            KrbLocalUserMapping On
            KrbServiceName HTTP
            KrbMethodK5Passwd Off
            KrbMethodNegotiate On
            KrbSaveCredentials On
            Require valid-user
            RequestHeader set REMOTE_USER %{REMOTE_USER}s
        </Location>
        <Location /static/>
            Order deny,allow
            Allow from all
            Satisfy any
        </Location>
    </VirtualHost>
    EOF
    sudo mkdir /var/{{module_name}}/
    sudo chown -R www-data:www-data /var/{{module_name}}/
    sudo a2ensite {{module_name}}.conf
    sudo apachectl -t
    sudo apachectl restart



Application
-----------

Now, it's time to install {{module_name}} (use Python3.2 on Debian 7):

.. code-block:: bash

    sudo mkdir -p /var/{{module_name}}
    sudo adduser --disabled-password {{module_name}}
    sudo chown {{module_name}}:www-data /var/{{module_name}}
    sudo apt-get install virtualenvwrapper python3.4 python3.4-dev build-essential postgresql-client libpq-dev
    # application
    sudo -u {{module_name}} -i
    SERVICE_NAME={{module_name}}.example.com
    mkvirtualenv {{module_name}} -p `which python3.4`
    workon {{module_name}}
    pip install setuptools --upgrade
    pip install pip --upgrade
    pip install {{module_name}} psycopg2
    mkdir -p $VIRTUAL_ENV/etc/{{module_name}}
    cat << EOF > $VIRTUAL_ENV/etc/{{module_name}}/settings.ini
    [global]
    server_name = $SERVICE_NAME
    protocol = http
    ; use https if your Apache uses SSL
    bind_address = 127.0.0.1:8001
    data_path = /var/{{module_name}}
    admin_email = admin@$SERVICE_NAME
    time_zone = Europe/Paris
    language_code = fr-fr
    debug = false
    remote_user_header = HTTP_REMOTE_USER
    ; leave it blank if you do not use kerberos

    [database]
    engine = django.db.backends.postgresql_psycopg2
    name = {{module_name}}
    user = {{module_name}}
    password = {{module_name}}-5trongp4ssw0rd
    host = localhost
    port = 5432
    EOF

    {{module_name}}-manage migrate
    {{module_name}}-manage collectstatic --noinput
    {{module_name}}-manage createsuperuser
    EOF


supervisor
----------

Supervisor is required to automatically launch {{module_name}}:

.. code-block:: bash

    sudo apt-get install supervisor
    cat << EOF | sudo tee /etc/supervisor/conf.d/{{module_name}}.conf
    [program:{{module_name}}_gunicorn]
    command = /home/{{module_name}}/.virtualenvs/{{module_name}}/bin/{{module_name}}-gunicorn
    user = {{module_name}}
    EOF
    sudo /etc/init.d/supervisor restart

Now, Supervisor should start {{module_name}} after a reboot.

systemd
-------

You can also use systemd to launch {{module_name}}:

.. code-block:: bash

    cat << EOF | sudo tee /etc/systemd/system/{{module_name}}-gunicorn.service
    [Unit]
    Description={{module_name}} Gunicorn process
    After=network.target
    [Service]
    User={{module_name}}
    Group={{module_name}}
    WorkingDirectory=/var/{{module_name}}/
    ExecStart=/home/{{module_name}}/.virtualenvs/{{module_name}}/bin/{{module_name}}-gunicorn
    ExecReload=/bin/kill -s HUP $MAINPID
    ExecStop=/bin/kill -s TERM $MAINPID
    [Install]
    WantedBy=multi-user.target
    EOF
    systemctl enable {{module_name}}-gunicorn.service