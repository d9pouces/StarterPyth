#coding=utf-8
"""Here are defined Python functions of views.
Views are binded to URLs in :mod:`{{ package_name }}.urls`.
"""
{% include 'header.py_inc' %}


from django import forms
from django.core.context_processors import csrf
from django.core.urlresolvers import reverse
from django.contrib import messages
from django.http import HttpResponseRedirect
from django.shortcuts import render_to_response
from django.template import RequestContext
from django.utils.translation import ugettext_lazy as _
import django.contrib.admin.widgets

#from {{ module_name }} import models


class SampleForm(forms.Form):
    """Sample form, with three fields."""
    title = forms.CharField(label=_('Title'), max_length=200,
                            widget=forms.widgets.TextInput(attrs={'placeholder': _('Please enter a title')}))
    time = forms.DateTimeField(label=_('Time'), widget=django.contrib.admin.widgets.AdminSplitDateTime())
    integer = forms.IntegerField(label=_('Optional field'), required=False)


def index(request):
    """Index view, displaying and processing a form."""
    if request.method == 'POST':
        form = SampleForm(request.POST)
        if form.is_valid():
            # TODO please process the form using dict form.cleaned_data
            messages.info(request, _('Form processed'))
            # if you don't have result to show (expected the info message),
            # you should redirect to another page
            # (prevents accidental re-submission of the same form)
            return HttpResponseRedirect(reverse(
                '{{ module_name }}.views.index'))
    else:
        form = SampleForm()
    template_values = {'form': form, }
    template_values.update(csrf(request))  # prevents cross-domain requests
    return render_to_response('index.html', template_values, RequestContext(request))


# def test(request, arg1, arg2):
    #"""Test view, displaying and processing a form."""
    #form = SampleForm()
    #template_values = {'arg1': arg1, 'arg2': arg2, }
    #template_values.update(csrf(request))  # prevents cross-domain requests
    #return render_to_response('test.html', template_values, RequestContext(request))
